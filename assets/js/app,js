document.addEventListener('DOMContentLoaded', () => {
    const dropdownButton = document.getElementById('units-button');
    const dropdownMenu = document.getElementById('units-menu');
    const menuItems = document.querySelectorAll('.menu__item');
    const systemToggleButton = document.querySelector('[data-action="toggle-system"]'); // Botón de cambio de sistema

    // Cargar el estado del menú desde localStorage
    const savedSelections = JSON.parse(localStorage.getItem('unitSelections')) || {
        temp: 'c', // Celsius por defecto
        wind: 'kmh', // km/h por defecto
        precip: 'mm' // mm por defecto
    };

    const queryInput = document.getElementById('query');
    const resultsContainer = document.getElementById('search-results');

    const toggleResultsVisibility = (show) => {
        if (show) {
            resultsContainer.style.display = 'flex'; // Mostrar los resultados si hay texto válido
        } else {
            resultsContainer.style.display = 'none'; // Ocultar los resultados
        }
    };

    const displayResults = (data) => {
        resultsContainer.innerHTML = ''; // Limpiar resultados anteriores

        if (data.loading) {
            // Mostrar el indicador de carga
            resultsContainer.innerHTML = `<div class="loading">
                <i class="fi fi-rr-spinner"></i>
                <p>Search in progress</p>
            </div>`;
            toggleResultsVisibility(true);
        } else if (data.cities.length > 0) {
            // Mostrar los resultados de la búsqueda
            data.cities.forEach(city => {
                const resultItem = document.createElement('div');
                resultItem.classList.add('result-item');

                // Resaltar la parte del texto que coincide
                const highlightedCity = highlightText(city.name);
                const highlightedCountry = highlightText(city.country);

                resultItem.innerHTML = `${highlightedCity}, ${highlightedCountry}`;
                resultItem.onclick = () => handleCitySelect(city);
                resultsContainer.appendChild(resultItem);
            });

            toggleResultsVisibility(true);
        } else {
            resultsContainer.innerHTML = `<div class="loading">
                <p>No results found</p>
            </div>`;
            toggleResultsVisibility(true);
        }
    };

    // Función para resaltar el texto buscado
    const highlightText = (text) => {
        const query = queryInput.value.trim();
        if (query) {
            // Resaltar coincidencias con el texto ingresado
            const regex = new RegExp(`(${query})`, 'gi');
            return text.replace(regex, '<span class="highlight">$1</span>');
        }
        return text;
    };

    const handleCitySelect = (city) => {
        // Realizar lo que necesites con la ciudad seleccionada, por ejemplo, mostrar el clima.
        console.log('Selected city:', city);
        resultsContainer.innerHTML = '';
        queryInput.value = `${city.name}, ${city.country}`; // Actualizar el input con la ciudad seleccionada
        toggleResultsVisibility(false);
    };

    // Llamada a la API de Open-Meteo
    const fetchCities = async (query) => {
        if (query.length < 3) {
            return;
        }

        displayResults({ loading: true }); // Mostrar el estado de carga

        try {
            const response = await fetch(`https://geocoding-api.open-meteo.com/v1/search?name=${query}&language=en&count=5`);

            // Verificar si la respuesta es válida
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }

            const data = await response.json();

            // Verificar si la respuesta contiene resultados válidos
            if (data.results && Array.isArray(data.results) && data.results.length > 0) {
                // Filtrar resultados duplicados por nombre y país
                const cities = data.results.map(result => ({
                    name: result.name,
                    country: result.country
                }));

                // Filtrar para eliminar ciudades duplicadas
                const uniqueCities = Array.from(new Set(cities.map(city => city.name + city.country)))
                    .map(nameCountry => {
                        return cities.find(city => city.name + city.country === nameCountry);
                    });

                // Mostrar los resultados
                displayResults({ cities: uniqueCities });
            } else {
                // Si no hay resultados, mostrar mensaje correspondiente
                displayResults({ cities: [], message: 'No cities found for this query.' });
            }
        } catch (error) {
            console.error('Error fetching cities:', error);
            displayResults({ cities: [], message: 'Error fetching data, please try again later.' });
        }
    };


    // Detectar cambios en el input de búsqueda
    queryInput.addEventListener('input', (e) => {
        const query = e.target.value.trim();

        if (query.length >= 3) {
            fetchCities(query); // Realizar la búsqueda solo si hay 3 o más caracteres
        } else {
            resultsContainer.innerHTML = ''; // Limpiar los resultados si el texto es menor a 3 caracteres
            toggleResultsVisibility(false); // Ocultar los resultados si hay menos de 3 caracteres
        }
    });

    // Función para aplicar el estado de selección a los elementos del menú
    const setSelected = () => {
        menuItems.forEach(item => {
            const key = item.getAttribute('data-key');
            const value = item.getAttribute('data-value');
            const icon = item.querySelector('i');  // Buscar el ícono dentro del botón

            if (savedSelections[key] === value) {
                item.classList.add('selected');
                item.setAttribute('aria-checked', 'true');
                // Añadir el icono de check a las opciones seleccionadas
                if (icon) {
                    icon.classList.add('fi-rr-check');
                }
            } else {
                item.classList.remove('selected');
                item.setAttribute('aria-checked', 'false');
                // Eliminar el icono de check si la opción no está seleccionada
                if (icon) {
                    icon.classList.remove('fi-rr-check');
                }
            }
        });
    };

    // Cambiar la selección y guardar en localStorage
    const handleSelectionChange = (e) => {
        const item = e.target.closest('.menu__item');  // Aseguramos que capturamos el click en cualquier parte del botón
        if (!item) return; // Aseguramos que solo se actúe sobre un elemento válido

        const key = item.getAttribute('data-key');
        const value = item.getAttribute('data-value');

        // Actualizar el estado en el objeto
        savedSelections[key] = value;

        // Guardar la selección en localStorage
        localStorage.setItem('unitSelections', JSON.stringify(savedSelections));

        // Actualizar la UI
        setSelected();
    };

    // Abrir y cerrar el menú
    const toggleMenu = () => {
        const expanded = dropdownButton.getAttribute('aria-expanded') === 'true';
        dropdownButton.setAttribute('aria-expanded', !expanded);
        dropdownMenu.style.display = expanded ? 'none' : 'block';
    };

    // Cerrar el menú si se hace clic fuera
    const closeMenuIfClickedOutside = (e) => {
        if (!dropdownButton.contains(e.target) && !dropdownMenu.contains(e.target)) {
            dropdownButton.setAttribute('aria-expanded', 'false');
            dropdownMenu.style.display = 'none';
        }
    };

    const closeResultsIfClickedOutside = (e) => {
        if (!resultsContainer.contains(e.target) && e.target !== queryInput) {
            toggleResultsVisibility(false);
        }
    }

    // Cambiar el sistema entre métrico e imperial
    const toggleSystem = () => {
        const currentSystem = savedSelections.temp === 'c' ? 'metric' : 'imperial';

        if (currentSystem === 'metric') {
            savedSelections.temp = 'f';
            savedSelections.wind = 'mph';
            savedSelections.precip = 'in';
            systemToggleButton.textContent = 'Switch to Metric'; // Cambiar texto a 'Switch to Metric'
        } else {
            savedSelections.temp = 'c';
            savedSelections.wind = 'kmh';
            savedSelections.precip = 'mm';
            systemToggleButton.textContent = 'Switch to Imperial'; // Cambiar texto a 'Switch to Imperial'
        }

        // Guardar la selección del sistema en localStorage
        localStorage.setItem('unitSelections', JSON.stringify(savedSelections));

        // Actualizar la UI
        setSelected();
    };

    // Inicializar el estado y eventos
    setSelected();

    // **Verificar y actualizar el texto del botón al cargar la página**
    const updateButtonText = () => {
        const currentSystem = savedSelections.temp === 'c' ? 'metric' : 'imperial';
        if (currentSystem === 'imperial') {
            systemToggleButton.textContent = 'Switch to Metric';  // Cambiar a Metric si estamos en Imperial
        } else {
            systemToggleButton.textContent = 'Switch to Imperial';  // Cambiar a Imperial si estamos en Metric
        }
    };

    // **Llamada para actualizar el texto del botón al cargar**
    updateButtonText();

    // Eventos
    dropdownButton.addEventListener('click', toggleMenu);
    systemToggleButton.addEventListener('click', toggleSystem);
    menuItems.forEach(item => {
        item.addEventListener('click', handleSelectionChange); // Añadimos el evento a cada item del menú
    });

    document.addEventListener('click', closeMenuIfClickedOutside);
    document.addEventListener('click', closeResultsIfClickedOutside);
});
